// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WH.Api.Data;

#nullable disable

namespace WH.Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WH.Api.Jobs.JobResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("LoadingJobResults", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.AccumulationRegister.AccumulationRegisterВыручкаИСебестоимостьПродажRecordType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date")
                        .HasAnnotation("Relational:JsonPropertyName", "Period");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Recorder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Recorder_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВидДеятельностиНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВидЗапасов_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ДокументДвижения")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ДокументДвижения_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("ДопРасходы")
                        .HasColumnType("float");

                    b.Property<double>("ДопРасходыБезНДС")
                        .HasColumnType("float");

                    b.Property<string>("ЗаказКлиента")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЗаказКлиента_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("НалогообложениеНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Партия")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Партия_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("РазделУчета")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("РасчетНеЗавершен")
                        .HasColumnType("bit");

                    b.Property<bool>("РасчетПартий")
                        .HasColumnType("bit");

                    b.Property<bool>("РасчетСебестоимости")
                        .HasColumnType("bit");

                    b.Property<string>("Склад")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Соглашение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Стоимость")
                        .HasColumnType("float");

                    b.Property<double>("СтоимостьБезНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаАвтоматическойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("СуммаВыручки")
                        .HasColumnType("float");

                    b.Property<double>("СуммаВыручкиБезНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<string>("ТипЗапасов")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AccumulationRegister_ВыручкаИСебестоимостьПродаж_RecordType", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.AccumulationRegister.AccumulationRegisterВыручкаИСебестоимостьПродажTurnovers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("ВидДеятельностиНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВидЗапасов_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("ДопРасходы")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "ДопРасходыTurnover");

                    b.Property<double>("ДопРасходыБезНДС")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "ДопРасходыБезНДСTurnover");

                    b.Property<string>("ЗаказКлиента")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЗаказКлиента_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Количество")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "КоличествоTurnover");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("РазделУчета")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Склад")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Соглашение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Стоимость")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "СтоимостьTurnover");

                    b.Property<double>("СтоимостьБезНДС")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "СтоимостьБезНДСTurnover");

                    b.Property<double>("СуммаАвтоматическойСкидки")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "СуммаАвтоматическойСкидкиTurnover");

                    b.Property<double>("СуммаВыручки")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "СуммаВыручкиTurnover");

                    b.Property<double>("СуммаВыручкиБезНДС")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "СуммаВыручкиБезНДСTurnover");

                    b.Property<double>("СуммаРучнойСкидки")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "СуммаРучнойСкидкиTurnover");

                    b.Property<string>("ТипЗапасов")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Трудозатраты")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "ТрудозатратыTurnover");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AccumulationRegister_ВыручкаИСебестоимостьПродаж_Turnovers", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.AccumulationRegister.AccumulationRegisterГрафикПоступленияТоваровRecordType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date")
                        .HasAnnotation("Relational:JsonPropertyName", "Period");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Recorder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Recorder_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ДатаСобытия")
                        .HasColumnType("Date");

                    b.Property<double>("КоличествоИзЗаказов")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоИзЗаказовСНеподтвержденными")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоПодЗаказ")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоПодЗаказСНеподтвержденными")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("AccumulationRegister_ГрафикПоступленияТоваров_RecordType", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.AccumulationRegister.AccumulationRegisterЗакупкиRecordType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date")
                        .HasAnnotation("Relational:JsonPropertyName", "Period");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Recorder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Recorder_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВидЗапасов_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Организация_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("РасчетСебестоимости")
                        .HasColumnType("bit");

                    b.Property<string>("Склад")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Стоимость")
                        .HasColumnType("float");

                    b.Property<double>("СтоимостьБезНДС")
                        .HasColumnType("float");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<double>("СуммаБезНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаДопРасходов")
                        .HasColumnType("float");

                    b.Property<double>("СуммаДопРасходовБезНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаСкидки")
                        .HasColumnType("float");

                    b.Property<string>("ТипЗапасов")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AccumulationRegister_Закупки_RecordType", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.AccumulationRegister.AccumulationRegisterТоварыНаСкладахBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<double>("ВНаличииBalance")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("AccumulationRegister_ТоварыНаСкладах_Balance", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.AccumulationRegister.AccumulationRegisterТоварыНаСкладахBalanceAndTurnovers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<double>("ВНаличииClosingBalance")
                        .HasColumnType("float");

                    b.Property<double>("ВНаличииExpense")
                        .HasColumnType("float");

                    b.Property<double>("ВНаличииOpeningBalance")
                        .HasColumnType("float");

                    b.Property<double>("ВНаличииReceipt")
                        .HasColumnType("float");

                    b.Property<double>("ВНаличииTurnover")
                        .HasColumnType("float");

                    b.Property<double>("КОтгрузкеClosingBalance")
                        .HasColumnType("float");

                    b.Property<double>("КОтгрузкеExpense")
                        .HasColumnType("float");

                    b.Property<double>("КОтгрузкеOpeningBalance")
                        .HasColumnType("float");

                    b.Property<double>("КОтгрузкеReceipt")
                        .HasColumnType("float");

                    b.Property<double>("КОтгрузкеTurnover")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("AccumulationRegister_ТоварыНаСкладах_BalanceAndTurnovers", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.AccumulationRegister.AccumulationRegisterТоварыНаСкладахRecordType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date")
                        .HasAnnotation("Relational:JsonPropertyName", "Period");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("RecordType")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Recorder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Recorder_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("ВНаличии")
                        .HasColumnType("float");

                    b.Property<double>("КОтгрузке")
                        .HasColumnType("float");

                    b.Property<bool>("КонтролироватьОстатки")
                        .HasColumnType("bit");

                    b.Property<string>("Назначение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("AccumulationRegister_ТоварыНаСкладах_RecordType", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Awesome.AwesomeТоварыНаСкладахRecordTypeОперацияЦены", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("RecordType")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Recorder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Recorder_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("ВНаличии")
                        .HasColumnType("float");

                    b.Property<double?>("Количество")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Операция")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double?>("ЦенаЗакупки")
                        .HasColumnType("float");

                    b.Property<double?>("ЦенаПродажи")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Awesome_ТоварыНаСкладах_RecordType_ОперацияЦены", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Awesome.VТоварыНаСкладахBalanceAndTurnoversNoWhs", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ВНаличииClosingBalance")
                        .HasColumnType("float");

                    b.Property<double?>("ВНаличииExpense")
                        .HasColumnType("float");

                    b.Property<double?>("ВНаличииOpeningBalance")
                        .HasColumnType("float");

                    b.Property<double?>("ВНаличииReceipt")
                        .HasColumnType("float");

                    b.Property<double?>("ВНаличииTurnover")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.ToTable((string)null);

                    b.ToView("v_ТоварыНаСкладах_BalanceAndTurnovers_no_whs", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Awesome.VТоварыНаСкладахRecordTypeОперацияЦеныOp", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("RecordType")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Recorder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Recorder_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("ВНаличии")
                        .HasColumnType("float");

                    b.Property<double?>("Количество")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Операция")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double?>("ЦенаЗакупки")
                        .HasColumnType("float");

                    b.Property<double?>("ЦенаПродажи")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("v_ТоварыНаСкладах_RecordType_Операция_Цены_op", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogБизнесРегионы", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_БизнесРегионы", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogВидыНоменклатуры", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_ВидыНоменклатуры", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogВидыЦен", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("БазовыйВидЦены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ВариантОкругления")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Идентификатор")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ИспользоватьПриВыпускеПродукции")
                        .HasColumnType("bit");

                    b.Property<bool>("ИспользоватьПриПередачеМеждуОрганизациями")
                        .HasColumnType("bit");

                    b.Property<bool>("ИспользоватьПриПередачеПродукцииДавальцу")
                        .HasColumnType("bit");

                    b.Property<bool>("ИспользоватьПриПродаже")
                        .HasColumnType("bit");

                    b.Property<double>("Наценка")
                        .HasColumnType("float");

                    b.Property<bool>("Округлять")
                        .HasColumnType("bit");

                    b.Property<bool>("ОкруглятьВБольшуюСторону")
                        .HasColumnType("bit");

                    b.Property<double>("ПорогСрабатывания")
                        .HasColumnType("float");

                    b.Property<int>("РеквизитДопУпорядочивания")
                        .HasColumnType("int");

                    b.Property<string>("СпособЗаданияЦены")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("ТочностьОкругления")
                        .HasColumnType("float");

                    b.Property<bool>("УстанавливатьЦенуПриВводеНаОсновании")
                        .HasColumnType("bit");

                    b.Property<string>("Формула")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ЦенаВключаетНДС")
                        .HasColumnType("bit");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_ВидыЦен", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogГруппыПользователей", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Комментарий")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_ГруппыПользователей", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogГруппыПользователейСостав", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Пользователь_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Catalog_ГруппыПользователей_Состав", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogЗначенияСвойствОбъектов", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Owner_Key")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Parent_Key")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_ЗначенияСвойствОбъектов", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogМарки", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Производитель_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_Марки", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogНоменклатура", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Артикул")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("БазоваяНоменклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double?>("ВесЗнаменатель")
                        .HasColumnType("float");

                    b.Property<double?>("ВесЧислитель")
                        .HasColumnType("float");

                    b.Property<string>("ВидНоменклатуры_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Марка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ПодвидНоменклатуры_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Производитель_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ТипНоменклатуры")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ТипУпаковки_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЦеноваяГруппа_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_Номенклатура", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПартнеры", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("БизнесРегион_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("ДатаРегистрации")
                        .HasColumnType("Date");

                    b.Property<bool>("Клиент")
                        .HasColumnType("bit");

                    b.Property<bool>("Конкурент")
                        .HasColumnType("bit");

                    b.Property<string>("ОсновнойМенеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Перевозчик")
                        .HasColumnType("bit");

                    b.Property<bool>("Поставщик")
                        .HasColumnType("bit");

                    b.Property<bool>("ПрочиеОтношения")
                        .HasColumnType("bit");

                    b.Property<string>("ЮрФизЛицо")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_Партнеры", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПартнерыVip", b =>
                {
                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Партнер_Key");

                    b.ToTable("Catalog_Партнеры_Vip", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПартнерыВидыДеятельности", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("ВидДеятельности_Key")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Catalog_Партнеры_ВидыДеятельности", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПартнерыДополнительныеРеквизиты", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Значение")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Свойство_Key")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Catalog_Партнеры_ДополнительныеРеквизиты", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПодвидыНоменклатуры", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_ПодвидыНоменклатуры", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПользователи", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Доброга_СхемаПредприятия_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Должность")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "Доброга_Должность");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_Пользователи", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПричиныОтменыЗаказовКлиентов", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_ПричиныОтменыЗаказовКлиентов", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogПроизводители", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_Производители", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogСклады", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("БизнесРегион_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ТипСклада")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_Склады", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogСоглашенияСКлиентами", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Номер")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Соглашение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_СоглашенияСКлиентами", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogСтруктураПредприятия", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Code")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_СтруктураПредприятия", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogУпаковкиЕдиницыИзмерения", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Owner")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Owner_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parent_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Безразмерная")
                        .HasColumnType("bit");

                    b.Property<double>("Вес")
                        .HasColumnType("float");

                    b.Property<string>("ВесЕдиницаИзмерения_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЕдиницаИзмерения_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Знаменатель")
                        .HasColumnType("float");

                    b.Property<int>("КоличествоУпаковок")
                        .HasColumnType("int");

                    b.Property<string>("ТипУпаковки")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Числитель")
                        .HasColumnType("float");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_УпаковкиЕдиницыИзмерения", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogЦеновыеГруппы", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("DeletionMark")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Catalog_ЦеновыеГруппы", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.CurrencyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyRates", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentАктОРасхожденияхПослеОтгрузки", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("МассаБруттоПоФакту")
                        .HasColumnType("float");

                    b.Property<double>("МассаНеттоПоФакту")
                        .HasColumnType("float");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_АктОРасхожденияхПослеОтгрузки", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentАктОРасхожденияхПослеОтгрузкиТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("ЗаказКлиента")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЗаказКлиента_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ЗаполненоПоРеализации")
                        .HasColumnType("bit");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоПоДокументу")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковокПоДокументу")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ПричинаРасхожденияKey")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasAnnotation("Relational:JsonPropertyName", "САР_ПричинаРасхождения_Key");

                    b.Property<string>("Реализация")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Реализация_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<double>("СуммаПоДокументу")
                        .HasColumnType("float");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_АктОРасхожденияхПослеОтгрузки_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentВозвратТоваровОтКлиента", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ДокументРеализации")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ДокументРеализации_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ПричинаВозврата")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("СуммаДокумента")
                        .HasColumnType("float");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_ВозвратТоваровОтКлиента", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentВозвратТоваровОтКлиентаТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("ДокументРеализации")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ДокументРеализации_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ПричинаВозвратаKey")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasAnnotation("Relational:JsonPropertyName", "Доброга_ПричинаВозврата_Key");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_ВозвратТоваровОтКлиента_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказКлиента", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ИсточникЗаявки_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasAnnotation("Relational:JsonPropertyName", "Доброга_ИсточникЗаявки_Key");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("НалогообложениеНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("СкидкиРассчитаны")
                        .HasColumnType("bit");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Согласован")
                        .HasColumnType("bit");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("СуммаДокумента")
                        .HasColumnType("float");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ЦенаВключаетНДС")
                        .HasColumnType("bit");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_ЗаказКлиента", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказКлиентаТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("ВидЦены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("ДатаОтгрузки")
                        .HasColumnType("datetime2");

                    b.Property<int>("КодСтроки")
                        .HasColumnType("int");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Отменено")
                        .HasColumnType("bit");

                    b.Property<string>("ПричинаОтмены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("ПроцентАвтоматическойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("ПроцентРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СтавкаНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<double>("СуммаАвтоматическойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("СуммаНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("СуммаСНДС")
                        .HasColumnType("float");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_ЗаказКлиента_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказНаПеремещение", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ДокументОснование")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ДокументОснование_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Организация_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ОрганизацияПолучатель_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СкладОтправитель_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СкладПолучатель_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_ЗаказНаПеремещение", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказНаПеремещениеТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("ЗНП_Комментарий")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ЗНП_ПричинаОтмены_Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("КодСтроки")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Отменено")
                        .HasColumnType("bit");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_ЗаказНаПеремещение_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОприходованиеИзлишковТоваров", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВидЦены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Основание")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Основание_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ответственный_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ПересчетТоваров_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_ОприходованиеИзлишковТоваров", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОприходованиеИзлишковТоваровТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_ОприходованиеИзлишковТоваров_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОтчетОРозничныхПродажах", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВидЦены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("НалогообложениеНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ответственный_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("СуммаДокумента")
                        .HasColumnType("float");

                    b.Property<bool>("ЦенаВключаетНДС")
                        .HasColumnType("bit");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_ОтчетОРозничныхПродажах", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОтчетОРозничныхПродажахТовары", b =>
                {
                    b.Property<string>("ИдентификаторСтроки")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Ref_Key")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("ПроцентРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<string>("СтавкаНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<double>("СуммаНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("ИдентификаторСтроки");

                    b.HasIndex("Ref_Key");

                    b.ToTable("Document_ОтчетОРозничныхПродажах_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentПриобретениеТоваровУслуг", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Валюта_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЗаказПоставщику_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("НалогообложениеНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("ПоступлениеПоЗаказам")
                        .HasColumnType("bit");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Согласован")
                        .HasColumnType("bit");

                    b.Property<double>("СуммаДокумента")
                        .HasColumnType("float");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ЦенаВключаетНДС")
                        .HasColumnType("bit");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_ПриобретениеТоваровУслуг", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentПриобретениеТоваровУслугТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("ЗаказПоставщику_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("ПроцентРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СтавкаНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<double>("СуммаНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("СуммаСНДС")
                        .HasColumnType("float");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_ПриобретениеТоваровУслуг_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentПриходныйОрдерНаТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ВсегоМест")
                        .HasColumnType("int");

                    b.Property<string>("Отправитель")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Отправитель_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Распоряжение")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Распоряжение_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СкладскаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_ПриходныйОрдерНаТовары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentРасходныйОрдерНаТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ВсегоМест")
                        .HasColumnType("int");

                    b.Property<DateTime>("ДатаОтгрузки")
                        .HasColumnType("Date");

                    b.Property<string>("Получатель")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Получатель_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СкладскаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_РасходныйОрдерНаТовары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentРеализацияТоваровУслуг", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ЗаказКлиента")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЗаказКлиента_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ИсточникЗаявки_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasAnnotation("Relational:JsonPropertyName", "Доброга_ИсточникЗаявки_Key");

                    b.Property<string>("Менеджер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("НалогообложениеНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Партнер_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("РеализацияПоЗаказам")
                        .HasColumnType("bit");

                    b.Property<bool>("СкидкиРассчитаны")
                        .HasColumnType("bit");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Согласован")
                        .HasColumnType("bit");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("СуммаДокумента")
                        .HasColumnType("float");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ЦенаВключаетНДС")
                        .HasColumnType("bit");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_РеализацияТоваровУслуг", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentРеализацияТоваровУслугТовары", b =>
                {
                    b.Property<string>("ИдентификаторСтроки")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Ref_Key")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ВидЦены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЗаказКлиента")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ЗаказКлиента_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("КодСтроки")
                        .HasColumnType("int");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("ПроцентАвтоматическойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("ПроцентРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СтавкаНДС")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Сумма")
                        .HasColumnType("float");

                    b.Property<double>("СуммаАвтоматическойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("СуммаНДС")
                        .HasColumnType("float");

                    b.Property<double>("СуммаРучнойСкидки")
                        .HasColumnType("float");

                    b.Property<double>("СуммаСНДС")
                        .HasColumnType("float");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("ИдентификаторСтроки");

                    b.HasIndex("Ref_Key");

                    b.ToTable("Document_РеализацияТоваровУслуг_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentСборкаТоваров", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВариантКомплектации_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ВариантПриемкиТоваров")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ЗаказНаСборку_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("НоменклатураОсновногоКомпонента_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Ответственный_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Подразделение_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("СборкаПодДеятельность")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Склад_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ХозяйственнаяОперация")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_СборкаТоваров", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentСборкаТоваровТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<double>("ДоляСтоимости")
                        .HasColumnType("float");

                    b.Property<int>("КодСтроки")
                        .HasColumnType("int");

                    b.Property<double>("Количество")
                        .HasColumnType("float");

                    b.Property<double>("КоличествоУпаковок")
                        .HasColumnType("float");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_СборкаТоваров_Товары", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentУстановкаЦенНоменклатуры", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ДокументОснование")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ДокументОснование_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ответственный_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Согласован")
                        .HasColumnType("bit");

                    b.Property<string>("Статус")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ref_Key");

                    b.ToTable("Document_УстановкаЦенНоменклатуры", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentУстановкаЦенНоменклатурыТовары", b =>
                {
                    b.Property<string>("Ref_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("ВидЦены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.Property<bool>("ЦенаИзмененаВручную")
                        .HasColumnType("bit");

                    b.HasKey("Ref_Key", "LineNumber");

                    b.ToTable("Document_УстановкаЦенНоменклатуры_Товары", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "Товары2_5");
                });

            modelBuilder.Entity("WH.Domain.Models.InformationRegister.InformationRegisterЦеныНоменклатурыRecordType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date")
                        .HasAnnotation("Relational:JsonPropertyName", "Period");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Recorder")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Recorder_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ВидЦены_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Упаковка_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("InformationRegister_ЦеныНоменклатуры_RecordType", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.InformationRegister.InformationRegisterЦеныНоменклатурыЗакупочныеSliceLast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<DateTime>("Period")
                        .HasColumnType("datetime2");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("InformationRegister_ЦеныНоменклатуры_Закупочные_SliceLast", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.InformationRegister.InformationRegisterЦеныНоменклатурыПоставкиSliceLast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<DateTime>("Period")
                        .HasColumnType("datetime2");

                    b.Property<string>("Номенклатура_Key")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Цена")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("InformationRegister_ЦеныНоменклатуры_Поставки_SliceLast", (string)null);
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogГруппыПользователейСостав", b =>
                {
                    b.HasOne("WH.Domain.Models.Catalog.CatalogГруппыПользователей", null)
                        .WithMany("Состав")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentАктОРасхожденияхПослеОтгрузкиТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentАктОРасхожденияхПослеОтгрузки", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentВозвратТоваровОтКлиентаТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentВозвратТоваровОтКлиента", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказКлиентаТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentЗаказКлиента", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказНаПеремещениеТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentЗаказНаПеремещение", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОприходованиеИзлишковТоваровТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentОприходованиеИзлишковТоваров", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОтчетОРозничныхПродажахТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentОтчетОРозничныхПродажах", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentПриобретениеТоваровУслугТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentПриобретениеТоваровУслуг", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentРеализацияТоваровУслугТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentРеализацияТоваровУслуг", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentСборкаТоваровТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentСборкаТоваров", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentУстановкаЦенНоменклатурыТовары", b =>
                {
                    b.HasOne("WH.Domain.Models.Document.DocumentУстановкаЦенНоменклатуры", null)
                        .WithMany("Товары")
                        .HasForeignKey("Ref_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WH.Domain.Models.Catalog.CatalogГруппыПользователей", b =>
                {
                    b.Navigation("Состав");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentАктОРасхожденияхПослеОтгрузки", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentВозвратТоваровОтКлиента", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказКлиента", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentЗаказНаПеремещение", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОприходованиеИзлишковТоваров", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentОтчетОРозничныхПродажах", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentПриобретениеТоваровУслуг", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentРеализацияТоваровУслуг", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentСборкаТоваров", b =>
                {
                    b.Navigation("Товары");
                });

            modelBuilder.Entity("WH.Domain.Models.Document.DocumentУстановкаЦенНоменклатуры", b =>
                {
                    b.Navigation("Товары");
                });
#pragma warning restore 612, 618
        }
    }
}
